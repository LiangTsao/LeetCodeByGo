package main

import "fmt"

func main() {
	matrix := [][]int{
		// {1, 1, 0, 0, 1},
		// {1, 0, 1, 1, 1},
		// {1, 1, 1, 1, 1},
		// {1, 0, 1, 0, 1},
		// {0, 0, 1, 0, 1}}
		// {0, 1, 1, 1},
		// {1, 1, 1, 1},
		// {0, 1, 1, 1}}
		// {1, 0, 1},
		// {1, 1, 0},
		// {1, 1, 0}}
		{1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1},
		{1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1},
		{1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
		{1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1}}
	fmt.Println("Output: ", countSquares(matrix))
}

//执行用时 :76 ms, 在所有 Go 提交中击败了98.94%的用户
//内存消耗 :6.6 MB, 在所有 Go 提交中击败了100.00%的用户
func countSquares(matrix [][]int) int {
	res := 0
	lr, lc := len(matrix), len(matrix[0])
	sides := make([][]int, lr)
	for i := range matrix {
		sides[i] = make([]int, lc)
		for j := lc - 1; j >= 0; j-- {
			if matrix[i][j] == 0 {
				sides[i][j] = 0
			} else {
				if j == lc-1 {
					sides[i][j] = 1
				} else {
					sides[i][j] = sides[i][j+1] + 1
				}
			}
		}
	}

	var side, cnt int
	for i := range matrix {
		for j := range matrix[i] {
			if matrix[i][j] == 0 {
				continue
			}
			side = min(sides[i][j], lr-i)
			cnt = 1
			for k := i + 1; k < i+side; k++ {
				if sides[k][j] <= cnt {
					break
				} else if sides[k][j] < side && sides[k][j] >= cnt {
					side = sides[k][j]
				}
				cnt++
				if side == 1 {
					break
				}
			}
			res += min(side, cnt)
		}
	}

	return res
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
